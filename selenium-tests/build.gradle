import com.enonic.uitest.server.ServerInstance

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
            jcenter()
        }
    }
}

plugins {
    id 'java'
    id 'maven-publish'
    id 'com.enonic.defaults' version '2.0.1'
}

apply plugin: 'groovy'

enonic {
    publishRepo = 'inhouse'
}

configurations {
    distro
}

ext {
    testName = 'general'
    xpVersion = '7.6.0-SNAPSHOT'
    csVersion = '3.2.0-SNAPSHOT'
    unpackDir = "$buildDir${File.separator}install"
    screenshotsDir = "$buildDir${File.separator}screenshots"
    reportsDir = "$buildDir${File.separator}reports"
    reportsTestsDir = "$reportsDir${File.separator}tests"
    distroDir = "$unpackDir${File.separator}enonic-xp-generic-$xpVersion"
    deployDir = "$distroDir${File.separator}home${File.separator}deploy"
    xpHome = "$distroDir${File.separator}home"
    configDir = "$xpHome${File.separator}config"
    contentStudioFile = "$deployDir${File.separator}contentstudio-${csVersion}.jar"
    contentStudioAppUrl = "https://repo.enonic.com/dev/com/enonic/app/contentstudio/${csVersion}/contentstudio-${csVersion}.jar"
}

task updateTestDir {
    def testDir
    def reports = file( reportsTestsDir )
    if ( reports.exists() )
    {
        reports.eachDir() { testDir = file( it ) }
        testName = testDir.exists() ? testDir.getName() : testName
    }
}

task zipScreenshots( type: Zip, dependsOn: updateTestDir ) {
    from screenshotsDir
    include '*'
    include '*/*'
    classifier "${testName}Screenshots"
}

task zipTestReports( type: Zip, dependsOn: updateTestDir ) {
    from reportsDir
    include '*'
    include '*/**'
    classifier "${testName}Reports"
}

publishing {
    publications {
        mavenJava( MavenPublication ) {
            artifact zipScreenshots
            artifact zipTestReports
        }
    }
}

jar.enabled = true

dependencies {
    compile 'org.seleniumhq.selenium:selenium-java:3.141.59'
    compile 'com.google.guava:guava:23.0'
    compile "com.enonic.xp:core-api:$xpVersion"
    compile 'log4j:log4j:1.2.17'
    compile 'org.codehaus.groovy:groovy-all:2.5.8'
    compile 'org.spockframework:spock-core:1.3-groovy-2.4'
    compile 'org.gebish:geb-spock:2.3.1'
    distro "com.enonic.xp:enonic-xp-generic:$xpVersion@zip"
}

task copyContentTypes( type: Copy ) {
    from '../test-applications/contenttypes/build/libs/'
    from '../test-applications/simple-page/build/libs/'
    from '../test-applications/myfirstapp/build/libs/'
    from '../test-applications/first-application/build/libs/'
    include '**/*.jar'
    into file( deployDir )
}

task copyPerfomanceApp( type: Copy ) {

    from '../test-applications/performance-app/build/libs/'
    include '**/*.jar'
    into file( deployDir )
    doLast {
        def mins = 1
        println "I'm waiting for $mins mins, because all content should be created."
        sleep mins * 60 * 1000
    }
}

task copyTestApplications( type: Copy ) {
    from '../test-applications/first-application/build/libs/'
    from '../test-applications/second-application/build/libs/'
    from '../test-applications/third-application/build/libs/'
    from '../test-applications/fourth-application/build/libs/'
    from '../test-applications/test-application/build/libs/'
    include '**/*.jar'
    into file( deployDir )
}

task copySimplePageApp( type: Copy ) {
    from '../test-applications/simple-page/build/libs/'

    include '**/*.jar'
    into file( deployDir )
}
task copyMyFirstApp( type: Copy ) {
    from '../test-applications/myfirstapp/build/libs/'
    from '../test-applications/contenttypes/build/libs/'

    include '**/*.jar'
    into file( deployDir )
}
task deleteFolders( type: Delete ) {
    delete unpackDir, screenshotsDir, reportsDir
}
task buildApplications(
    dependsOn: [':test-applications:first-application:install', ':test-applications:simple-page:install', ':test-applications:contenttypes:install',
                ':test-applications:second-application:install', ':test-applications:third-application:install', ':test-applications:fourth-application:install', ':test-applications:test-application:install', ':test-applications:myfirstapp:install'] )

task unpackDistro( type: Copy ) {
    from {
        configurations.distro.collect { zipTree( it ) }
    }
    into file( unpackDir )
}

task deployContentStudio( type: DefaultTask ) {
    doLast {
        println 'Retrieving Content Studio App from:'
        println contentStudioAppUrl
        println 'Deploying to:'
        println contentStudioFile

        def f = new File( contentStudioFile )
        if ( !f.exists() )
        {
            new URL( contentStudioAppUrl ).withInputStream { i -> f.withOutputStream { it << i } }
            println 'Content Studio App is downloaded.'
        }
        else
        {
            println 'Content Studio App already exists.'
        }
    }
}

task copyConfig( type: Copy ) {
    from '../test-applications/common-config/'
    include '**.*.cfg'
    include '*.properties'
    into file( configDir )
}

ext {
    xpServer = new ServerInstance()
}

task startServer( dependsOn: [unpackDistro, copyConfig, deployContentStudio] ) {
    doLast {
        // logging.captureStandardOutput LogLevel.INFO
        // ext.xpServer = new ServerInstance()
        xpServer.installDir = file( distroDir )
        xpServer.startupDelay = 40000
        xpServer.start()
    }
    copyConfig.mustRunAfter unpackDistro
    deployContentStudio.mustRunAfter unpackDistro
}

task stopServer {
    doLast {
        xpServer.stop()
    }
}

tasks.withType( Test ) {
    jvmArgs '-Xms128m', '-Xmx1024m'
    testLogging {
        exceptionFormat "full"
        events "started", "passed", "skipped", "failed", "standardOut", "standardError"
        displayGranularity = 0
    }
}

task testContentStudio( type: Test, dependsOn: [buildApplications, deleteFolders, startServer, copyContentTypes] ) {
    scanForTestClasses = false
    include '**/content/**/*Spec.class'
    exclude '**/content/relationship/**Spec.class'
    exclude '**/content/liveedit/**Spec.class'
    exclude '**/content/input_types/*Spec.class'
    exclude '**/content/move_publish_sort/**/*Spec.class'
    exclude '**/content/details_panel/**Spec.class'
    exclude '**/content/volume_testing/**Spec.class'
    forkEvery = null
    deleteFolders.mustRunAfter buildApplications
    startServer.mustRunAfter deleteFolders
    copyContentTypes.mustRunAfter startServer
}

task testInputTypes( type: Test, dependsOn: [buildApplications, deleteFolders, startServer, copyContentTypes] ) {
    scanForTestClasses = false
    include '**/content/input_types/*Spec.class'
    include '**/content/relationship/**Spec.class'
    exclude '**/content/liveedit/**Spec.class'
    forkEvery = null
    deleteFolders.mustRunAfter buildApplications
    startServer.mustRunAfter deleteFolders
    copyContentTypes.mustRunAfter startServer
}

task testPublishMoveSortDeatailsPanel( type: Test, dependsOn: [buildApplications, deleteFolders, startServer, copyContentTypes] ) {
    scanForTestClasses = false
    include '**/content/move_publish_sort/**/*Spec.class'
    include '**/content/details_panel/*Spec.class'
    forkEvery = null
    deleteFolders.mustRunAfter buildApplications
    startServer.mustRunAfter deleteFolders
    copyContentTypes.mustRunAfter startServer
}

task testPageEditor( type: Test, dependsOn: [buildApplications, deleteFolders, startServer, copyMyFirstApp, copySimplePageApp] ) {
    scanForTestClasses = false
    include '**/content/liveedit/**Spec.class'
    forkEvery = null
    deleteFolders.mustRunAfter buildApplications
    startServer.mustRunAfter deleteFolders
    copyMyFirstApp.mustRunAfter startServer
    copySimplePageApp.mustRunAfter startServer
}

task testPageEditorLocal( type: Test ) {
    scanForTestClasses = false
    include '**/content/liveedit/**Spec.class'
    forkEvery = null
}

task testPublishMoveSortDeatailsPanelLocal( type: Test ) {
    scanForTestClasses = false
    include '**/content/move_publish_sort/**/*Spec.class'
    include '**/content/details_panel/*Spec.class'
    forkEvery = null
}

task testInputTypesLocal( type: Test ) {
    scanForTestClasses = false
    include '**/content/input_types/*Spec.class'
    forkEvery = null
}

task testContentStudioLocal( type: Test ) {
    scanForTestClasses = false
    include '**/content/**/*Spec.class'
    exclude '**/content/liveedit/**Spec.class'
    exclude '**/content/input_types/*Spec.class'
    exclude '**/content/move_publish_sort/**/**Spec.class'
    exclude '**/content/relationship/**Spec.class'
    exclude '**/content/details_panel/**Spec.class'
    exclude '**/content/volume_testing/**Spec.class'
    forkEvery = null
}

testPageEditor.finalizedBy = ['stopServer']
testContentStudio.finalizedBy = ['stopServer']
testInputTypes.finalizedBy = ['stopServer']

//
// Chrome Headless tests:
//

task testPublishMoveSortDetailsPanelChrHeadless( type: Test,
                                                 dependsOn: [buildApplications, deleteFolders, startServer, copyContentTypes] ) {
    //set system property
    System.setProperty 'chrome.headless', 'true'
    //set required JvmOption:
    systemProperty 'chrome.headless', System.getProperty( 'chrome.headless' )
    scanForTestClasses = false
    include '**/content/move_publish_sort/**/*Spec.class'
    include '**/content/details_panel/*Spec.class'
    forkEvery = null
    deleteFolders.mustRunAfter buildApplications
    startServer.mustRunAfter deleteFolders
    copyContentTypes.mustRunAfter startServer
}
//Stop server is not necessary when run in a Docker container.
testPublishMoveSortDetailsPanelChrHeadless.finalizedBy = ['stopServer']

task testInputTypesChrHeadless( type: Test, dependsOn: [buildApplications, deleteFolders, startServer, copyContentTypes] ) {
    //set system property
    System.setProperty 'chrome.headless', 'true'
    //set required JvmOption:
    systemProperty 'chrome.headless', System.getProperty( 'chrome.headless' )
    scanForTestClasses = false
    include '**/content/input_types/*Spec.class'
    include '**/content/relationship/**Spec.class'
    forkEvery = null
    deleteFolders.mustRunAfter buildApplications
    startServer.mustRunAfter deleteFolders
    copyContentTypes.mustRunAfter startServer
}
//Stop server is not necessary when run in a Docker container.
testInputTypesChrHeadless.finalizedBy = ['stopServer']

task testPageEditorChrHeadless( type: Test, dependsOn: [buildApplications, deleteFolders, startServer, copyContentTypes] ) {
    //set system property
    System.setProperty 'chrome.headless', 'true'
    //set required JvmOption:
    systemProperty 'chrome.headless', System.getProperty( 'chrome.headless' )
    scanForTestClasses = false
    include '**/content/liveedit/**Spec.class'
    forkEvery = null
    deleteFolders.mustRunAfter buildApplications
    startServer.mustRunAfter deleteFolders
    copyContentTypes.mustRunAfter startServer
}
//Stop server is not necessary when run in a Docker container.
testPageEditorChrHeadless.finalizedBy = ['stopServer']

task testBaseWizardGridChrHeadless( type: Test, dependsOn: [buildApplications, deleteFolders, startServer, copyContentTypes] ) {
    //set system property
    System.setProperty 'chrome.headless', 'true'
    //set required JvmOption:
    systemProperty 'chrome.headless', System.getProperty( 'chrome.headless' )
    scanForTestClasses = false
    include '**/content/*Spec.class'
    include '**/content/portal/**Spec.class'
    include '**/content/responsive/**Spec.class'
    forkEvery = null
    deleteFolders.mustRunAfter buildApplications
    startServer.mustRunAfter deleteFolders
    copyContentTypes.mustRunAfter startServer
}
//Stop server is not necessary when run in a Docker container.
testBaseWizardGridChrHeadless.finalizedBy = ['stopServer']


//
// Firefox tests
//
task testBaseWizardGridFirefoxHeadless( type: Test, dependsOn: [buildApplications, startServer, copyContentTypes] ) {
    //set system property
    System.setProperty 'geb.env', 'firefox'
    System.setProperty 'firefox.headless', 'true'
    //set required JvmOption:
    systemProperty 'geb.env', System.getProperty( 'geb.env' )
    systemProperty 'firefox.headless', System.getProperty( 'firefox.headless' )
    scanForTestClasses = false
    include '**/content/*Spec.class'
    include '**/content/portal/**Spec.class'
    forkEvery = null
    startServer.mustRunAfter buildApplications
    copyContentTypes.mustRunAfter startServer
}
//Stop server is not necessary when run in a Docker container.
testBaseWizardGridFirefoxHeadless.finalizedBy = ['stopServer']

task testFirefox( type: Test ) {
    //set system property
    System.setProperty 'geb.env', 'firefox'
    System.setProperty 'firefox.headless', 'true'
    //set required JvmOption:
    systemProperty 'geb.env', System.getProperty( 'geb.env' )
    //systemProperty 'firefox.headless', System.getProperty( 'firefox.headless' )
    scanForTestClasses = false
    include '**/content/*Spec.class'
    include '**/content/portal/**Spec.class'
    forkEvery = null
}
testFirefox.finalizedBy = ['stopServer']

task testPublishMoveSortDeatailsPanelFirefox( type: Test,
                                              dependsOn: [buildApplications, startServer, copyContentTypes] ) {
    //set system property
    System.setProperty 'geb.env', 'firefox'
    //set required JvmOption:
    systemProperty 'geb.env', System.getProperty( 'geb.env' )
    scanForTestClasses = false
    include '**/content/move_publish_sort/**Spec.class'
    include '**/content/details_panel/*Spec.class'
    exclude '**/content/move_publish_sort/ManualSortContent_Spec.class'
    forkEvery = null
    startServer.mustRunAfter buildApplications
    copyContentTypes.mustRunAfter startServer
}
testPublishMoveSortDeatailsPanelFirefox.finalizedBy = ['stopServer']

task testInputTypesFirefox( type: Test, dependsOn: [buildApplications, startServer, copyContentTypes] ) {
    //set system property
    System.setProperty 'geb.env', 'firefox'
    //set required JvmOption:
    systemProperty 'geb.env', System.getProperty( 'geb.env' )

    scanForTestClasses = false
    include '**/content/input_types/*Spec.class'
    include '**/content/relationship/**Spec.class'
    exclude '**/content/liveedit/**Spec.class'
    forkEvery = null
    startServer.mustRunAfter buildApplications
    copyContentTypes.mustRunAfter startServer
}
testInputTypesFirefox.finalizedBy = ['stopServer']

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://repo.enonic.com/dev'
    }
}
