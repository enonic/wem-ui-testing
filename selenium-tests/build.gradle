import com.enonic.uitest.server.ServerInstance

apply plugin: 'groovy'



configurations {
    distro
}

ext {
    xpVersion = '6.5.0-SNAPSHOT'
    unpackDir = "$buildDir${File.separator}install"
    screenshotsDir = "$buildDir${File.separator}screenshots"
    reportsDir = "$buildDir${File.separator}repots"
    distroDir = "$unpackDir${File.separator}enonic-xp-$xpVersion"
    deployDir = "$distroDir${File.separator}home${File.separator}deploy"
    xpHome = "$distroDir${File.separator}home"
}

dependencies {
    compile 'org.seleniumhq.selenium:selenium-java:2.52.0'
    compile 'com.google.guava:guava:18.0'
    compile "com.enonic.xp:core-api:$xpVersion"
    compile 'log4j:log4j:1.2.17'
    compile 'org.codehaus.groovy:groovy-all:2.1.8'
    compile 'org.spockframework:spock-core:0.7-groovy-2.0'
    compile 'org.gebish:geb-spock:0.10.0'

    distro "com.enonic.xp:distro:$xpVersion@zip"
}
task copyContentTypes( type: Copy ) {
    from '../test-applications/contenttypes/build/libs/'
    from '../test-applications/simple-page/build/libs/'
    from '../test-applications/myfirstapp/build/libs/'
    include '**/*.jar'
    into file( deployDir )
}

task copyTestApplications( type: Copy ) {
    from '../test-applications/first-application/build/libs/'
    from '../test-applications/second-application/build/libs/'
    from '../test-applications/third-application/build/libs/'
    from '../test-applications/fourth-application/build/libs/'
    from '../test-applications/test-application/build/libs/'
    include '**/*.jar'
    into file( deployDir )
}

task copySimplePageApp( type: Copy ) {
    from '../test-applications/simple-page/build/libs/'

    include '**/*.jar'
    into file( deployDir )
}
task copyMyFirstApp( type: Copy ) {
    from '../test-applications/myfirstapp/build/libs/'
    from '../test-applications/contenttypes/build/libs/'

    include '**/*.jar'
    into file( deployDir )
}
task deleteFolders( type: Delete ) {
    delete unpackDir, screenshotsDir, reportsDir
}
task buildApplications(
    dependsOn: [':test-applications:first-application:install', ':test-applications:simple-page:install', ':test-applications:contenttypes:install',
                ':test-applications:second-application:install', ':test-applications:third-application:install', ':test-applications:fourth-application:install', ':test-applications:test-application:install', ':test-applications:myfirstapp:install'] )

task unpackDistro( type: Copy ) {
    from {
        configurations.distro.collect { zipTree( it ) }
    }
    into file( unpackDir )
}

ext {
    xpServer = new ServerInstance()
}

task startServer( dependsOn: unpackDistro ) {
    doLast {
        // logging.captureStandardOutput LogLevel.INFO
        // ext.xpServer = new ServerInstance()
        xpServer.installDir = file( distroDir )
        xpServer.startupDelay = 40000
        xpServer.start()
    }
}

task stopServer << {
    xpServer.stop()
}

tasks.withType( Test ) {
    jvmArgs '-Xms128m', '-Xmx1024m'
    testLogging {
        exceptionFormat "full"
        events "started", "passed", "skipped", "failed", "standardOut", "standardError"
        displayGranularity = 0
    }
}

task testContentManager( type: Test, dependsOn: [buildApplications, deleteFolders, startServer, copyContentTypes] ) {
    scanForTestClasses = false
    include '**/*Spec.class'
    exclude '**/application/**'
    exclude '**/user/**'
    exclude '**/content/upload/**Spec.class'
    exclude '**/content/relationship/**Spec.class'
    exclude '**/content/liveedit/**Spec.class'
    exclude '**/content/input_types/*Spec.class'
    exclude '**/content/move_publish_sort/**Spec.class'
    forkEvery = null
    deleteFolders.mustRunAfter buildApplications
    startServer.mustRunAfter deleteFolders
    copyContentTypes.mustRunAfter startServer
}
task testInputTypes( type: Test, dependsOn: [buildApplications, deleteFolders, startServer, copyContentTypes] ) {
    scanForTestClasses = false
    include '**/content/input_types/*Spec.class'
    include '**/content/relationship/**Spec.class'
    exclude '**/application/**'
    exclude '**/user/**'
    exclude '**/content/upload/**Spec.class'
    exclude '**/content/liveedit/**Spec.class'
    forkEvery = null
    deleteFolders.mustRunAfter buildApplications
    startServer.mustRunAfter deleteFolders
    copyContentTypes.mustRunAfter startServer
}

task testPublishMoveSort( type: Test, dependsOn: [buildApplications, deleteFolders, startServer, copyContentTypes] ) {
    scanForTestClasses = false
    include '**/content/move_publish_sort/*Spec.class'
    exclude '**/application/**'
    exclude '**/user/**'
    forkEvery = null
    deleteFolders.mustRunAfter buildApplications
    startServer.mustRunAfter deleteFolders
    copyContentTypes.mustRunAfter startServer
}

task testUser( type: Test, dependsOn: [deleteFolders, startServer] ) {
    scanForTestClasses = false
    include '**/user/*Spec.class'
    exclude '**/content/**'
    exclude '**/application/**'
    forkEvery = null
    startServer.shouldRunAfter deleteFolders
}

task testApplication( type: Test, dependsOn: [buildApplications, deleteFolders, startServer, copyTestApplications] ) {
    println xpHome
    println "XP_HOME is:"
    println System.getenv( "XP_HOME" );

    scanForTestClasses = false
    include '**/application/*Spec.class'
    exclude '**/content/**'
    exclude '**/user/**'
    forkEvery = null
    deleteFolders.mustRunAfter buildApplications
    startServer.mustRunAfter deleteFolders
    copyTestApplications.mustRunAfter startServer
}

task testApplicationWithFirefox( type: Test, dependsOn: [buildApplications, deleteFolders, startServer, copyTestApplications] ) {
    println "XP_HOME is:"
    println System.getenv( "XP_HOME" );

    //set system property
    System.setProperty 'geb.env', 'firefox';
    //set required JvmOption:
    systemProperty 'geb.env', System.getProperty( 'geb.env' );

    scanForTestClasses = false
    include '**/application/*Spec.class'
    exclude '**/content/**'
    exclude '**/user/**'
    forkEvery = null
    deleteFolders.mustRunAfter buildApplications
    startServer.mustRunAfter deleteFolders
    copyTestApplications.mustRunAfter startServer
}

task testSimpleSiteLiveEdit( type: Test, dependsOn: [buildApplications, deleteFolders, startServer, copyMyFirstApp, copySimplePageApp] ) {
    scanForTestClasses = false
    exclude '**/application/**'
    exclude '**/user/**'
    include '**/content/liveedit/**Spec.class'
    forkEvery = null
    deleteFolders.mustRunAfter buildApplications
    startServer.mustRunAfter deleteFolders
    copyMyFirstApp.mustRunAfter startServer
    copySimplePageApp.mustRunAfter startServer
}


task testUploadContent( type: Test, dependsOn: [deleteFolders, buildApplications, startServer, copyContentTypes] ) {
    scanForTestClasses = false
    exclude '**/application/**'
    exclude '**/user/**'
    include '**/content/upload/**Spec.class'
    forkEvery = null
    copyContentTypes.shouldRunAfter startServer
}

task testUserLocal( type: Test ) {
    scanForTestClasses = false
    include '**/user/*Spec.class'
    exclude '**/content/**'
    exclude '**/application/**'
    forkEvery = null
}

task testApplicationLocal( type: Test ) {
    println "XP_HOME is:"
    println System.getenv( "XP_HOME" );
    scanForTestClasses = false
    include '**/application/*Spec.class'
    exclude '**/content/**'
    exclude '**/user/**'
    forkEvery = null
}

task testApplicationBrowserStack( type: Test ) {
    //set system property
    System.setProperty 'geb.env', 'browserstack';
    //set required JvmOption:
    systemProperty 'geb.env', System.getProperty( 'geb.env' );
    scanForTestClasses = false
    include '**/application/*Spec.class'
    exclude '**/content/**'
    exclude '**/user/**'
    forkEvery = null
}
task testPublishMoveSortLocal( type: Test ) {
    scanForTestClasses = false
    include '**/content/move_publish_sort/*Spec.class'
    include '**/content/relationship/**Spec.class'
    exclude '**/application/**'
    exclude '**/user/**'
    forkEvery = null
}
task testInputTypesLocal( type: Test ) {
    scanForTestClasses = false
    include '**/content/input_types/*Spec.class'
    exclude '**/application/**'
    exclude '**/user/**'
    exclude '**/content/ContentUploadSpec.class'
    exclude '**/content/liveedit/**Spec.class'
    forkEvery = null
}
task testContentManagerLocal( type: Test ) {
    scanForTestClasses = false
    include '**/*Spec.class'
    exclude '**/application/**'
    exclude '**/user/**'
    exclude '**/content/ContentUploadSpec.class'
    exclude '**/content/liveedit/**Spec.class'
    exclude '**/content/input_types/*Spec.class'
    exclude '**/content/move_publish_sort/**Spec.class'
    exclude '**/content/relationship/**Spec.class'
    forkEvery = null
}

testApplication.finalizedBy = ['stopServer']
testSimpleSiteLiveEdit.finalizedBy = ['stopServer']
testUser.finalizedBy = ['stopServer']
testContentManager.finalizedBy = ['stopServer']
testInputTypes.finalizedBy = ['stopServer']

