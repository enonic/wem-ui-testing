import com.enonic.uitest.server.ServerInstance

apply plugin: 'groovy'

configurations {
    distro
}

ext {
    xpVersion = '5.2.0-SNAPSHOT'
    unpackDir = "$buildDir/install"
    screenshotsDir = "$buildDir/screenshots"
    reportsDir = "$buildDir/repots"
    distroDir = "$unpackDir/enonic-xp-$xpVersion"
}

dependencies {
    compile 'org.seleniumhq.selenium:selenium-java:2.45.0'
    compile 'com.enonic.xp:core-api:5.2.0-SNAPSHOT'
    compile 'log4j:log4j:1.2.17'
    compile 'org.codehaus.groovy:groovy-all:2.1.8'
    compile 'org.spockframework:spock-core:0.7-groovy-2.0'
    compile 'org.gebish:geb-spock:0.10.0'

    distro "com.enonic.xp:distro:$xpVersion@zip"
}
task deleteFolders( type: Delete ) {
    delete unpackDir, screenshotsDir, reportsDir
}
task buildModules(
    dependsOn: [':test-modules:first-module:install', ':test-modules:simple-page:install', ':test-modules:all-contenttypes:install',
                ':test-modules:second-module:install', ':test-modules:third-module:install', ':test-modules:fourth-module:install', ':test-modules:test-module:install'] )

task unpackDistro( type: Copy ) {
    from {
        configurations.distro.collect { zipTree( it ) }
    }
    into file( unpackDir )
}

ext {
    xpServer = new ServerInstance()
}

task startServer( dependsOn: unpackDistro ) {
    doLast {
        // logging.captureStandardOutput LogLevel.INFO
        // ext.xpServer = new ServerInstance()
        xpServer.installDir = file( distroDir )
        xpServer.startupDelay = 20000
        xpServer.start()
    }
}

task stopServer << {
    xpServer.stop()
}


task installTestModules( type: Test, dependsOn: ['startServer'] ) {
    scanForTestClasses = true
    exclude '**/*Spec.class'
    include '**/module/InstallTestModules.class'
}

task installSimpleSiteModule( type: Test, dependsOn: ['buildModules', 'startServer'] ) {

    scanForTestClasses = true
    exclude '**/*Spec.class'
    include '**/liveedit/InstallSimpleSiteModule.class'
}

task installAllContentTypesModule( type: Test, dependsOn: ['buildModules', 'startServer'] ) {
    scanForTestClasses = true
    exclude '**/*Spec.class'
    include '**/input_types/InstallContentTypesModule.class'
}

tasks.withType( Test ) {
    jvmArgs '-Xms128m', '-Xmx1024m'
    testLogging {
        exceptionFormat "full"
        events "started", "passed", "skipped", "failed", "standardOut", "standardError"
        displayGranularity = 0
    }
}

task testContentManager( type: Test, dependsOn: [deleteFolders, startServer, installAllContentTypesModule] ) {
    scanForTestClasses = false
    include '**/*Spec.class'
    exclude '**/module/**'
    exclude '**/user/**'
    exclude '**/content/ContentUploadSpec.class'
    exclude '**/content/liveedit/**Spec.class'
    exclude '**/content/input_types/*Spec.class'
    exclude '**/content/move_publish_sort/*Spec.class'
    forkEvery = null
    startServer.shouldRunAfter deleteFolders

}
task testInputTypes( type: Test, dependsOn: [buildModules, deleteFolders, startServer, installAllContentTypesModule] ) {
    scanForTestClasses = false
    include '**/content/input_types/*Spec.class'
    exclude '**/module/**'
    exclude '**/user/**'
    exclude '**/content/ContentUploadSpec.class'
    exclude '**/content/liveedit/**Spec.class'
    forkEvery = null
    startServer.shouldRunAfter deleteFolders
    installAllContentTypesModule.shouldRunAfter startServer
}

task testPublishMoveSort( type: Test, dependsOn: [buildModules, deleteFolders, startServer, installAllContentTypesModule] ) {
    scanForTestClasses = false
    include '**/content/move_publish_sort/*Spec.class'
    include '**/content/ContentUploadSpec.class'
    exclude '**/module/**'
    exclude '**/user/**'
    forkEvery = null
    startServer.shouldRunAfter deleteFolders
    installAllContentTypesModule.shouldRunAfter startServer
}

task testUser( type: Test, dependsOn: [deleteFolders, startServer] ) {
    scanForTestClasses = false
    include '**/user/*Spec.class'
    exclude '**/content/**'
    exclude '**/module/**'
    forkEvery = null
    startServer.shouldRunAfter deleteFolders
}

task testModule( type: Test, dependsOn: [buildModules, deleteFolders, startServer, installTestModules] ) {
    scanForTestClasses = false
    include '**/module/*Spec.class'
    exclude '**/content/**'
    exclude '**/user/**'
    forkEvery = null
    startServer.shouldRunAfter deleteFolders
    installTestModules.shouldRunAfter startServer
}



task testSimpleSiteLiveEdit( type: Test, dependsOn: [deleteFolders, installSimpleSiteModule] ) {
    scanForTestClasses = false

    include '**/liveedit/CreateSiteWithLayoutSpec.class'
    include '**/content/ContentUploadSpec.class'
    exclude '**/module/**'
    exclude '**/user/**'
    forkEvery = null
}


task testUploadContent( type: Test, dependsOn: ['startServer'] ) {
    scanForTestClasses = false
    exclude '**/module/**'
    exclude '**/user/**'
    include '**/content/ContentUploadSpec.class'
    forkEvery = null
}

testModule.finalizedBy = ['stopServer']
testSimpleSiteLiveEdit.finalizedBy = ['stopServer']
testUser.finalizedBy = ['stopServer']
testContentManager.finalizedBy = ['stopServer']

