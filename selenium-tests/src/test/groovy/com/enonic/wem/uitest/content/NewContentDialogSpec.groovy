package com.enonic.wem.uitest.contentimport com.enonic.autotests.pages.contentmanager.browsepanel.ContentBrowsePanelimport com.enonic.autotests.pages.contentmanager.browsepanel.NewContentDialogimport com.enonic.autotests.services.NavigatorHelperimport com.enonic.wem.uitest.BaseGebSpecimport spock.lang.Sharedimport spock.lang.Stepwise@Stepwiseclass NewContentDialogSpec    extends BaseGebSpec{    @Shared    ContentBrowsePanel contentBrowsePanel;    def setup()    {        go "admin"        contentBrowsePanel = NavigatorHelper.openContentStudioApp( getTestSession() );    }    def "WHEN New button has ben clicked THEN 'new-content' dialog with title 'Create Content' should be present"()    {        when: "'New' button on the toolbar has been pressed"        NewContentDialog newContentDialog = contentBrowsePanel.clickToolbarNew();        then: "dialog with title 'Create Content' should be shown"        newContentDialog.isOpened();        and: "search input should be enabled"        newContentDialog.waitUntilSearchInputEnabled();        and: "upload button should be enabled"        newContentDialog.isUploadButtonEnabled();        and: "most popular block should be present"        newContentDialog.isMostPopularBlockDisplayed();       // and: "base:folder type should be present in the list"        //newContentDialog.getContentTypesNames().contains( "base:folder" )    }    def "WHEN NewContentDialog is opened THEN some most popular types should be present in the block"()    {        when: "NewContentDialog is opened"        NewContentDialog newContentDialog = contentBrowsePanel.clickToolbarNew();        then: "some most popular types should be present in the block"        newContentDialog.getMostPopularItemsNames().size() != 0;    }    def "GIVEN 'new-content' dialog is opened WHEN 'folder' text has been typed  THEN only one content type showed in the list"()    {        given: "opened a 'new-content' dialog"        NewContentDialog newContentDialog = contentBrowsePanel.clickToolbarNew();        when: "'folder' search text typed"        newContentDialog.typeSearchTextInHiddenInput( "folder" );        then: "only one item shown"        newContentDialog.getNumberContentTypesFromList() == 1;    }    def "GIVEN 'new-content' dialog is opened WHEN not existing type has been typed THEN empty list should be shown"()    {        given: "'new-content' dialog is opened"        NewContentDialog newContentDialog = contentBrowsePanel.clickToolbarNew();        saveScreenshot( "test_new_content_dialog" );        when: "not existing type has been typed"        newContentDialog.typeSearchTextInHiddenInput( "supertype" );        then: "empty list should be shown"        newContentDialog.getNumberContentTypesFromList() == 0;    }    def "GIVEN opened a 'new-content' dialog, WHEN adding text-search 'shortcut' THEN only one content type should be present in the list"()    {        given: "'new-content' dialog is opened "        NewContentDialog newContentDialog = contentBrowsePanel.clickToolbarNew();        when: "'shortcut' search text has been typed"        newContentDialog.typeSearchTextInHiddenInput( "shortcut" );        then: "only one content type should be present in the list "        newContentDialog.getNumberContentTypesFromList() == 1;    }    def "GIVEN 'new-content' dialog is opened AND 'site' was typed in the search-input  WHEN search input has been cleared THEN initial list of content types should be disaplayed"()    {        given: "'new-content' dialog is opened and 'site' text was typed"        NewContentDialog newContentDialog = contentBrowsePanel.clickToolbarNew();        int number = newContentDialog.getNumberContentTypesFromList();        newContentDialog.typeSearchTextInHiddenInput( "site" );        when: "search input has been cleared"        newContentDialog.clearSearchInput();        then: "initial list of content types should be displayed"        newContentDialog.getNumberContentTypesFromList() == number;    }}