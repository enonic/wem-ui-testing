package com.enonic.wem.uitest.contentimport com.enonic.autotests.pages.contentmanager.browsepanel.ContentStatusimport com.enonic.autotests.pages.contentmanager.browsepanel.SortContentDialogimport com.enonic.autotests.utils.NameHelperimport com.enonic.autotests.vo.contentmanager.Contentimport com.enonic.xp.content.ContentPathimport com.enonic.xp.schema.content.ContentTypeNameimport spock.lang.Sharedimport spock.lang.Stepwise@Stepwiseclass ContentBrowsePanel_ContextMenu_Spec    extends BaseContentSpec{    @Shared    Content TEST_FOLDER;    def "GIVEN a content WHEN content selected and 'Delete' selected from context menu  THEN content not exist in view"()    {        setup: "build a new folder-content"        Content content = buildFolderContent( "folder", "context menu delete" );        and: "add new content: click on 'new' button, populate a wizard and close it"        addContent( content );        when: "right clicks on the selected folder and select 'Delete' from the context menu"        filterPanel.typeSearchText( content.getName() );        contentBrowsePanel.selectDeleteFromContextMenu( content.getName() ).doDelete();        then: "content deleted and not exist in view"        !contentBrowsePanel.exists( content.getName(), true );    }    def "GIVEN a content WHEN content selected and 'Publish' selected from context menu  THEN content with 'Online' status listed"()    {        setup: "build a new folder-content"        Content folder = buildFolderContent( "folder", "context menu publish" );        and: "add new content: click on 'new' button, populate a wizard and close it"        addContent( folder );        when: "right clicks on the selected folder and select 'Publish' from the context menu"        contentBrowsePanel.selectPublishFromContextMenu( folder.getName() ).clickOnPublishNowButton().waitForDialogClosed();        then: "content deleted and not exist in view"        contentBrowsePanel.getContentStatus( folder.getName() ) == ContentStatus.ONLINE.getValue();    }    def "GIVEN a content WHEN content selected and 'Duplicate' selected from context menu  THEN new content with 'copy' in name  listed"()    {        setup: "build a new folder-content"        Content folder = buildFolderContent( "folder", "context menu duplicate" );        and: "add new content: click on 'new' button, populate a wizard and close it"        addContent( folder );        when: "right clicks on the selected folder and select 'Publish' from the context menu"        contentBrowsePanel.selectDuplicateFromContextMenu( folder.getName() );        then: "content deleted and not exist in view"        contentBrowsePanel.exists( folder.getName() + "-copy" );    }    def "GIVEN a content WHEN content selected and 'Edit' selected from context menu  THEN content is listed with it's new name"()    {        setup: "builds a new folder-content"        Content content = buildFolderContent( "folder", "context menu edit" );        and: "add new content: click on 'new' button, populate a wizard and close it"        addContent( content );        when: "right clicks on the selected folder and select 'Edit' from the context menu, populate a new data and save it"        Content newContent = cloneContentWithNewName( content );        findAndSelectContent( content.getName() );        contentBrowsePanel.selectEditFromContextMenu( content.getName() ).typeData( newContent ).save().close(            newContent.getDisplayName() );        then: "content is listed with it's new name"        filterPanel.typeSearchText( newContent.getName() );        contentBrowsePanel.exists( newContent.getName(), true );    }    def "GIVEN a folder WHEN folder selected and 'Sort' selected from context menu  THEN 'sort'- modal dialog appears"()    {        when: "right clicks on the selected folder and select 'Sort' from the context menu"        findAndSelectContent( IMPORTED_FOLDER_NAME );        SortContentDialog modalDialog = contentBrowsePanel.selectSortInContextMenu( IMPORTED_FOLDER_NAME );        then: "'Sort' modal dialog appears"        modalDialog.isPresent();    }    def "GIVEN a content WHEN content selected and 'New' selected from a context menu THEN new Content should be listed beneath parent"()    {        setup: "builds a new archive-content"        Content parent = buildFolderContent( "folder", "context menu new" );        and: "add new content: click on 'new' button, add a new content"        addContent( parent );        and: "builds a new folder content, that will be child for the first content"        Content newContent = Content.builder().            name( "childfolder" ).            displayName( "folder-child" ).            parent( ContentPath.from( parent.getName() ) ).            contentType( ContentTypeName.folder() ).            build();        when: "right clicks on the first content and select 'New' from the context menu, populate content wizard and save"        contentBrowsePanel.selectNewFromContextMenu( parent.getName() ).selectContentType( newContent.getContentTypeName() ).typeData(            newContent ).save().close( newContent.getDisplayName() );        contentBrowsePanel.waitUntilPageLoaded( 3 );        filterPanel.typeSearchText( parent.getName() );        contentBrowsePanel.expandContent( parent.getPath() );        then: "new Content should be listed beneath parent"        contentBrowsePanel.exists( newContent.getName(), true );    }    Content cloneContentWithNewName( Content source )    {        String newName = NameHelper.uniqueName( "newname" );        return Content.builder().            name( newName ).            displayName( source.getDisplayName() ).            parent( source.getParent() ).            contentType( source.getContentTypeName() ).            build();    }}