package com.enonic.wem.uitest.contentimport com.enonic.autotests.pages.contentmanager.browsepanel.ContentStatusimport com.enonic.autotests.pages.contentmanager.browsepanel.SortContentDialogimport com.enonic.autotests.utils.TestUtilsimport com.enonic.autotests.vo.contentmanager.Contentimport spock.lang.Sharedimport spock.lang.Stepwise@Stepwiseclass ContentBrowsePanel_ContextMenuFolder_Spec    extends BaseContentSpec{    @Shared    String NEW_DISPLAY_NAME = "context-menu-edit-test";    def "GIVEN a folder WHEN context menu opened  THEN all items have correct state"()    {        when: "context menu opened"        filterPanel.typeSearchText( IMPORTED_FOLDER_NAME );        sleep( 1000 );        contentBrowsePanel.openContextMenu( IMPORTED_FOLDER_NAME );        TestUtils.saveScreenshot( getSession(), "context-menu-folder" )        then: "Delete menu item is enabled"        contentBrowsePanel.isEnabledContextMenuItem( "Delete" );        and: "Preview menu item is disabled"        !contentBrowsePanel.isEnabledContextMenuItem( "Preview" );        and: "Edit menu item is enabled"        contentBrowsePanel.isEnabledContextMenuItem( "Edit" );        and: "New menu item is enabled"        contentBrowsePanel.isEnabledContextMenuItem( "New" );        and: "Sort menu item is enabled"        contentBrowsePanel.isEnabledContextMenuItem( "Sort" );        and: "New menu item is enabled"        contentBrowsePanel.isEnabledContextMenuItem( "Duplicate" );        and: "Move menu item is enabled"        contentBrowsePanel.isEnabledContextMenuItem( "Move" );        and: "Publish menu item is enabled"        contentBrowsePanel.isEnabledContextMenuItem( "Publish" );    }    def "GIVEN a content WHEN content selected and 'Delete' selected from context menu  THEN content not exist in view"()    {        setup: "build a new folder-content"        Content content = buildFolderContent( "folder", "context menu delete" );        and: "add new content: click on 'new' button, populate a wizard and close it"        addContent( content );        when: "right clicks on the selected folder and select 'Delete' from the context menu"        filterPanel.typeSearchText( content.getName() );        contentBrowsePanel.selectDeleteFromContextMenu( content.getName() ).doDelete();        then: "content deleted and not exist in view"        !contentBrowsePanel.exists( content.getName(), true );    }    def "GIVEN a content WHEN content selected and 'Publish' selected from context menu  THEN content with 'Online' status listed"()    {        setup: "build a new folder-content"        Content folder = buildFolderContent( "folder", "context menu publish" );        and: "add new content: click on 'new' button, populate a wizard and close it"        addContent( folder );        when: "right clicks on the selected folder and select 'Publish' from the context menu"        contentBrowsePanel.selectPublishFromContextMenu( folder.getName() ).clickOnPublishNowButton().waitForDialogClosed();        filterPanel.typeSearchText( folder.getName() );        TestUtils.saveScreenshot( getSession(), "context-menu-folder-published" )        then: "content deleted and not exist in view"        contentBrowsePanel.getContentStatus( folder.getName() ).equalsIgnoreCase( ContentStatus.ONLINE.getValue() );    }    def "GIVEN a content WHEN content selected and 'Duplicate' selected from context menu  THEN new content with 'copy' in name  listed"()    {        setup: "build a new folder-content"        Content folder = buildFolderContent( "folder", "context menu duplicate" );        and: "add new content: click on 'new' button, populate a wizard and close it"        addContent( folder );        when: "right clicks on the selected folder and select 'Publish' from the context menu"        contentBrowsePanel.selectDuplicateFromContextMenu( folder.getName() );        TestUtils.saveScreenshot( getSession(), "context-menu-folder-duplicated" )        then: "content deleted and not exist in view"        contentBrowsePanel.exists( folder.getName() + "-copy" );    }    def "GIVEN a content WHEN content selected and 'Edit' selected from context menu  THEN content is listed with it's new name"()    {        setup: "builds a new folder-content"        Content content = buildFolderContent( "folder", "context menu edit" );        and: "add new content: click on 'new' button, populate a wizard and close it"        addContent( content );        when: "right clicks on the selected folder and select 'Edit' from the context menu, change the display name and save it"        findAndSelectContent( content.getName() );        contentBrowsePanel.selectEditFromContextMenu( content.getName() ).typeDisplayName( NEW_DISPLAY_NAME ).save().close(            NEW_DISPLAY_NAME );        then: "content is listed with it's new display name"        filterPanel.typeSearchText( NEW_DISPLAY_NAME );        TestUtils.saveScreenshot( getSession(), "context-menu-folder-edited" )        contentBrowsePanel.exists( content.getName(), true );    }    def "GIVEN a folder WHEN folder selected and 'Sort' selected from context menu  THEN 'sort'- modal dialog appears"()    {        when: "right clicks on the selected folder and select 'Sort' from the context menu"        filterPanel.typeSearchText( IMPORTED_FOLDER_NAME );        SortContentDialog modalDialog = contentBrowsePanel.selectSortInContextMenu( IMPORTED_FOLDER_NAME );        then: "'Sort' modal dialog appears"        modalDialog.isPresent();    }    def "GIVEN parent content added WHEN the parent selected and 'New' from a context menu selected AND data typed AND child content saved THEN new child should be listed beneath the parent"()    {        setup: "builds a new archive-content"        Content parent = buildFolderContent( "folder", "context menu new" );        and: "parent content added"        addContent( parent );        and: "builds a new folder content, that will be child for the first content"        Content childContent = buildFolderContentWithParent( "child", "child folder", parent.getName() );        when: "parent content selected and 'New' from the context menu selected AND data typed AND wizard saved"        contentBrowsePanel.selectNewFromContextMenu( parent.getName() ).selectContentType( childContent.getContentTypeName() ).typeData(            childContent ).save().close( childContent.getDisplayName() );        sleep( 400 );        and: "parent content expanded"        filterPanel.typeSearchText( parent.getName() );        TestUtils.saveScreenshot( getSession(), "context-menu-folder-new" )        contentBrowsePanel.expandContent( parent.getPath() );        then: "new child content should be listed beneath the parent"        contentBrowsePanel.exists( childContent.getName(), true );    }}